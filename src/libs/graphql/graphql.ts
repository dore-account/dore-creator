import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Upload: any;
};

export type Creator = {
  __typename?: 'Creator';
  /** クリエイターのカテゴリー */
  category: Array<CreatorCategory>;
  /** クリエイターID */
  id: Scalars['ID'];
  /** クリエイター特有の情報 */
  info: CreatorInfo;
  user: User;
};

export type CreatorCategory = {
  __typename?: 'CreatorCategory';
  creatorId: Scalars['ID'];
  /** クリエイターID */
  id: Scalars['ID'];
  /** カテゴリー */
  name: Scalars['String'];
};

export type CreatorInfo = {
  __typename?: 'CreatorInfo';
  /** 所属先 */
  belongs: Scalars['String'];
  creatorId: Scalars['ID'];
  /** クリエイターID */
  id: Scalars['ID'];
};

export type CreatorInput = {
  belongs: Scalars['String'];
  categoryId: Scalars['ID'];
};

/** Autogenerated input type of DeleteUserImage */
export type DeleteUserImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteUserImage */
export type DeleteUserImagePayload = {
  __typename?: 'DeleteUserImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export enum GenderStatus {
  Male = 'male',
  Woman = 'woman'
}

export type Mutation = {
  __typename?: 'Mutation';
  deleteUserImage?: Maybe<DeleteUserImagePayload>;
  updateCreator?: Maybe<UpdateCreatorPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
  updateUserInfo?: Maybe<UpdateUserInfoPayload>;
  uploadUserImage?: Maybe<UploadUserImagePayload>;
};


export type MutationDeleteUserImageArgs = {
  input: DeleteUserImageInput;
};


export type MutationUpdateCreatorArgs = {
  input: UpdateCreatorInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationUpdateUserInfoArgs = {
  input: UpdateUserInfoInput;
};


export type MutationUploadUserImageArgs = {
  input: UploadUserImageInput;
};

export type Query = {
  __typename?: 'Query';
  creators: Array<Creator>;
  user: User;
};

/** Autogenerated input type of UpdateCreator */
export type UpdateCreatorInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: CreatorInput;
};

/** Autogenerated return type of UpdateCreator */
export type UpdateCreatorPayload = {
  __typename?: 'UpdateCreatorPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  creator: Creator;
};

/** Autogenerated input type of UpdateUserInfo */
export type UpdateUserInfoInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params?: InputMaybe<UserInfoInput>;
};

/** Autogenerated return type of UpdateUserInfo */
export type UpdateUserInfoPayload = {
  __typename?: 'UpdateUserInfoPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: UserInput;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

/** Autogenerated input type of UploadUserImage */
export type UploadUserImageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  image: Scalars['Upload'];
};

/** Autogenerated return type of UploadUserImage */
export type UploadUserImagePayload = {
  __typename?: 'UploadUserImagePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  /** 年齢 */
  age: Scalars['Int'];
  /** 誕生日 */
  birthDayDd: Scalars['Int'];
  /** 誕生月 */
  birthDayMm: Scalars['Int'];
  /** 誕生年 */
  birthDayYy: Scalars['Int'];
  gender: GenderStatus;
  id: Scalars['ID'];
  images: Array<UserImage>;
  info: UserInfo;
  instagramLink: Scalars['String'];
  introduction: Scalars['String'];
  name: Scalars['String'];
  /** @** のようなuserの識別子 */
  slug: Scalars['String'];
  tiktokLink: Scalars['String'];
  twitterLink: Scalars['String'];
};

export type UserImage = {
  __typename?: 'UserImage';
  /** 画像のID */
  id: Scalars['ID'];
  /** 画像のURL */
  path: Scalars['String'];
};

export type UserInfo = {
  __typename?: 'UserInfo';
  /** クリエイターID */
  id: Scalars['ID'];
  /** 推し */
  stan: Scalars['String'];
  userId: Scalars['ID'];
};

export type UserInfoInput = {
  stan?: InputMaybe<Scalars['String']>;
};

export type UserInput = {
  birthDayDd: Scalars['Int'];
  birthDayMm: Scalars['Int'];
  birthDayYy: Scalars['Int'];
  gender: GenderStatus;
  instagramLink?: InputMaybe<Scalars['String']>;
  introduction?: InputMaybe<Scalars['String']>;
  name: Scalars['String'];
  tiktokLink?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
};

export type DeleteUserImageMutationVariables = Exact<{
  input: DeleteUserImageInput;
}>;


export type DeleteUserImageMutation = { __typename?: 'Mutation', deleteUserImage?: { __typename?: 'DeleteUserImagePayload', user: { __typename?: 'User', id: string, slug: string, name: string, introduction: string, gender: GenderStatus, age: number, birthDayYy: number, birthDayMm: number, birthDayDd: number, twitterLink: string, instagramLink: string, tiktokLink: string, images: Array<{ __typename?: 'UserImage', id: string, path: string }>, info: { __typename?: 'UserInfo', id: string, stan: string, userId: string } } } | null };

export type UploadUserImageMutationVariables = Exact<{
  input: UploadUserImageInput;
}>;


export type UploadUserImageMutation = { __typename?: 'Mutation', uploadUserImage?: { __typename?: 'UploadUserImagePayload', user: { __typename?: 'User', id: string, slug: string, name: string, introduction: string, gender: GenderStatus, age: number, birthDayYy: number, birthDayMm: number, birthDayDd: number, twitterLink: string, instagramLink: string, tiktokLink: string, images: Array<{ __typename?: 'UserImage', id: string, path: string }>, info: { __typename?: 'UserInfo', id: string, stan: string, userId: string } } } | null };

export type CreatorsQueryVariables = Exact<{ [key: string]: never; }>;


export type CreatorsQuery = { __typename?: 'Query', creators: Array<{ __typename?: 'Creator', id: string }> };

export type UserQueryVariables = Exact<{ [key: string]: never; }>;


export type UserQuery = { __typename?: 'Query', user: { __typename?: 'User', id: string, slug: string, name: string, introduction: string, gender: GenderStatus, age: number, birthDayYy: number, birthDayMm: number, birthDayDd: number, twitterLink: string, instagramLink: string, tiktokLink: string, images: Array<{ __typename?: 'UserImage', id: string, path: string }>, info: { __typename?: 'UserInfo', id: string, stan: string, userId: string } } };


export const DeleteUserImageDocument = gql`
    mutation DeleteUserImage($input: DeleteUserImageInput!) {
  deleteUserImage(input: $input) {
    user {
      id
      slug
      name
      introduction
      gender
      age
      birthDayYy
      birthDayMm
      birthDayDd
      twitterLink
      instagramLink
      tiktokLink
      images {
        id
        path
      }
      info {
        id
        stan
        userId
      }
    }
  }
}
    `;
export type DeleteUserImageMutationFn = Apollo.MutationFunction<DeleteUserImageMutation, DeleteUserImageMutationVariables>;

/**
 * __useDeleteUserImageMutation__
 *
 * To run a mutation, you first call `useDeleteUserImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserImageMutation, { data, loading, error }] = useDeleteUserImageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteUserImageMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserImageMutation, DeleteUserImageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserImageMutation, DeleteUserImageMutationVariables>(DeleteUserImageDocument, options);
      }
export type DeleteUserImageMutationHookResult = ReturnType<typeof useDeleteUserImageMutation>;
export type DeleteUserImageMutationResult = Apollo.MutationResult<DeleteUserImageMutation>;
export type DeleteUserImageMutationOptions = Apollo.BaseMutationOptions<DeleteUserImageMutation, DeleteUserImageMutationVariables>;
export const UploadUserImageDocument = gql`
    mutation UploadUserImage($input: UploadUserImageInput!) {
  uploadUserImage(input: $input) {
    user {
      id
      slug
      name
      introduction
      gender
      age
      birthDayYy
      birthDayMm
      birthDayDd
      twitterLink
      instagramLink
      tiktokLink
      images {
        id
        path
      }
      info {
        id
        stan
        userId
      }
    }
  }
}
    `;
export type UploadUserImageMutationFn = Apollo.MutationFunction<UploadUserImageMutation, UploadUserImageMutationVariables>;

/**
 * __useUploadUserImageMutation__
 *
 * To run a mutation, you first call `useUploadUserImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadUserImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadUserImageMutation, { data, loading, error }] = useUploadUserImageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUploadUserImageMutation(baseOptions?: Apollo.MutationHookOptions<UploadUserImageMutation, UploadUserImageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UploadUserImageMutation, UploadUserImageMutationVariables>(UploadUserImageDocument, options);
      }
export type UploadUserImageMutationHookResult = ReturnType<typeof useUploadUserImageMutation>;
export type UploadUserImageMutationResult = Apollo.MutationResult<UploadUserImageMutation>;
export type UploadUserImageMutationOptions = Apollo.BaseMutationOptions<UploadUserImageMutation, UploadUserImageMutationVariables>;
export const CreatorsDocument = gql`
    query Creators {
  creators {
    id
  }
}
    `;

/**
 * __useCreatorsQuery__
 *
 * To run a query within a React component, call `useCreatorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCreatorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCreatorsQuery({
 *   variables: {
 *   },
 * });
 */
export function useCreatorsQuery(baseOptions?: Apollo.QueryHookOptions<CreatorsQuery, CreatorsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CreatorsQuery, CreatorsQueryVariables>(CreatorsDocument, options);
      }
export function useCreatorsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CreatorsQuery, CreatorsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CreatorsQuery, CreatorsQueryVariables>(CreatorsDocument, options);
        }
export type CreatorsQueryHookResult = ReturnType<typeof useCreatorsQuery>;
export type CreatorsLazyQueryHookResult = ReturnType<typeof useCreatorsLazyQuery>;
export type CreatorsQueryResult = Apollo.QueryResult<CreatorsQuery, CreatorsQueryVariables>;
export const UserDocument = gql`
    query User {
  user {
    id
    slug
    name
    introduction
    gender
    age
    birthDayYy
    birthDayMm
    birthDayDd
    twitterLink
    instagramLink
    tiktokLink
    images {
      id
      path
    }
    info {
      id
      stan
      userId
    }
  }
}
    `;

/**
 * __useUserQuery__
 *
 * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useUserQuery(baseOptions?: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);
      }
export function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);
        }
export type UserQueryHookResult = ReturnType<typeof useUserQuery>;
export type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;
export type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;