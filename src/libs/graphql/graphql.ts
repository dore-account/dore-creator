import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Autogenerated input type of CreateUserDetail */
export type CreateUserDetailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: UserDetailInput;
};

/** Autogenerated return type of CreateUserDetail */
export type CreateUserDetailPayload = {
  __typename?: 'CreateUserDetailPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUserDetail?: Maybe<CreateUserDetailPayload>;
  updateUserDetail?: Maybe<UpdateUserDetailPayload>;
};


export type MutationCreateUserDetailArgs = {
  input: CreateUserDetailInput;
};


export type MutationUpdateUserDetailArgs = {
  input: UpdateUserDetailInput;
};

export type Query = {
  __typename?: 'Query';
  getUser: User;
  getUsers: Array<User>;
};


export type QueryGetUserArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


export type QueryGetUsersArgs = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated input type of UpdateUserDetail */
export type UpdateUserDetailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  params: UserDetailInput;
};

/** Autogenerated return type of UpdateUserDetail */
export type UpdateUserDetailPayload = {
  __typename?: 'UpdateUserDetailPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  birthDayDd?: Maybe<Scalars['Int']>;
  birthDayMm?: Maybe<Scalars['Int']>;
  birthDayYy?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  instagramLink?: Maybe<Scalars['String']>;
  introduction?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tiktokLink?: Maybe<Scalars['String']>;
  twitterLink?: Maybe<Scalars['String']>;
  uid: Scalars['String'];
};

export type UserDetailInput = {
  birthDayDd?: InputMaybe<Scalars['Int']>;
  birthDayMm?: InputMaybe<Scalars['Int']>;
  birthDayYy?: InputMaybe<Scalars['Int']>;
  gender?: InputMaybe<Scalars['Int']>;
  instagramLink?: InputMaybe<Scalars['String']>;
  introduction?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  tiktokLink?: InputMaybe<Scalars['String']>;
  twitterLink?: InputMaybe<Scalars['String']>;
  uid?: InputMaybe<Scalars['String']>;
};

export type UsersQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersQuery = { __typename?: 'Query', getUsers: Array<{ __typename?: 'User', id: string }> };


export const UsersDocument = gql`
    query users {
  getUsers {
    id
  }
}
    `;

/**
 * __useUsersQuery__
 *
 * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
      }
export function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
        }
export type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;
export type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;
export type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;